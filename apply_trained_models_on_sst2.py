# -*- coding: utf-8 -*-
"""apply trained models on SST2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16vlhND9L-wsKwsFVc4HwznZjRIcvlXno
"""



from google.colab import drive
drive.mount('/content/drive')

#@title Install required packages
!pip install transformers datasets torch pandas scipy safetensors --quiet

#@title Import Libraries
import os
import torch
import pandas as pd
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from datasets import load_dataset
from scipy.spatial.distance import jensenshannon
from scipy.stats import wasserstein_distance

#@title Define Paths to Trained Models
base_path = "/content/drive/MyDrive/approach2"
roberta_gender_path = os.path.join(base_path, "roberta/gender")
roberta_race_path   = os.path.join(base_path, "roberta/race")
mentalbert_gender_path = os.path.join(base_path, "mentalbert/gender")
mentalbert_race_path   = os.path.join(base_path, "mentalbert/race")

#@title Load Tokenizers and Models
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

def load_model(model_path):
    tokenizer = AutoTokenizer.from_pretrained(model_path)
    model = AutoModelForSequenceClassification.from_pretrained(model_path)
    return tokenizer, model.to(device)

# Load all models
print("âœ… Loading models...")
tokenizer_roberta_gender, roberta_gender_model = load_model(roberta_gender_path)
tokenizer_roberta_race, roberta_race_model = load_model(roberta_race_path)
tokenizer_mentalbert_gender, mentalbert_gender_model = load_model(mentalbert_gender_path)
tokenizer_mentalbert_race, mentalbert_race_model = load_model(mentalbert_race_path)

#@title Load SST-2 Dataset
dataset = load_dataset("glue", "sst2", split="validation")
print(f"âœ… Loaded {len(dataset)} SST-2 validation samples.")

#@title Define Inference Function with Label Mapping Fix
def predict_label(model, tokenizer, sentence):
    """Returns the predicted label name using model config mapping."""
    inputs = tokenizer(sentence, return_tensors="pt", truncation=True, padding=True, max_length=128)
    inputs = {k: v.to(device) for k, v in inputs.items()}
    outputs = model(**inputs)
    probs = torch.nn.functional.softmax(outputs.logits, dim=1)
    pred_idx = torch.argmax(probs, dim=1).item()

    # Robust id2label mapping (handles int or string keys)
    id2label = model.config.id2label
    if pred_idx in id2label:
        return id2label[pred_idx]
    elif str(pred_idx) in id2label:
        return id2label[str(pred_idx)]
    else:
        return f"unknown_{pred_idx}"  # fallback

#@title Run Predictions on SST-2 Sentences
results_gender = []
results_race = []

print("ðŸš€ Applying models to SST-2 (this may take a few minutes)...")
for example in dataset:
    sentence = example["sentence"]
    sentiment = example["label"]

    # Gender predictions
    gender_pred_roberta = predict_label(roberta_gender_model, tokenizer_roberta_gender, sentence)
    gender_pred_mentalbert = predict_label(mentalbert_gender_model, tokenizer_mentalbert_gender, sentence)

    # Race predictions
    race_pred_roberta = predict_label(roberta_race_model, tokenizer_roberta_race, sentence)
    race_pred_mentalbert = predict_label(mentalbert_race_model, tokenizer_mentalbert_race, sentence)

    results_gender.append({
        "sentence": sentence,
        "sst2_sentiment": sentiment,
        "gender_roberta": gender_pred_roberta,
        "gender_mentalbert": gender_pred_mentalbert
    })

    results_race.append({
        "sentence": sentence,
        "sst2_sentiment": sentiment,
        "race_roberta": race_pred_roberta,
        "race_mentalbert": race_pred_mentalbert
    })

#@title Save Results to CSV
df_gender = pd.DataFrame(results_gender)
df_race = pd.DataFrame(results_race)

save_dir = "/content/drive/MyDrive/dataset"
os.makedirs(save_dir, exist_ok=True)

df_gender.to_csv(f"{save_dir}/sst2_with_gender_predictions.csv", index=False)
df_race.to_csv(f"{save_dir}/sst2_with_race_predictions.csv", index=False)

print("âœ… Gender predictions saved to:")
print(f"- {save_dir}/sst2_with_gender_predictions.csv")
print("âœ… Race predictions saved to:")
print(f"- {save_dir}/sst2_with_race_predictions.csv")