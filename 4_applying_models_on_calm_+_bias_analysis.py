# -*- coding: utf-8 -*-
"""4-Applying Models on CALM + Bias Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q5cNbOK0Ci7PguXOdF8SxyuwVF29sN6C
"""

# ============================================
# Section 1: Environment Setup & Loading CALM Datasets
# ============================================
import os
import json
import random
import pandas as pd
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from torch.utils.data import DataLoader, TensorDataset
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# For JSD & WD
from scipy.spatial.distance import jensenshannon
import scipy.stats as stats

# Create necessary directories for data
os.makedirs("CALM/data/gender_datasets", exist_ok=True)
os.makedirs("CALM/data/race_datasets", exist_ok=True)

# Download Gender and Race datasets
!wget -O CALM/data/gender_datasets/sentiment_gender_dataset.jsonl "https://huggingface.co/datasets/vipulgupta/CALM/raw/main/data/gender_datasets/sentiment_gender_dataset.jsonl"
!wget -O CALM/data/race_datasets/sentiment_race_dataset.jsonl "https://huggingface.co/datasets/vipulgupta/CALM/raw/main/data/race_datasets/sentiment_race_dataset.jsonl"

print("Gender dataset exists:", os.path.exists("CALM/data/gender_datasets/sentiment_gender_dataset.jsonl"))
print("Race dataset exists:", os.path.exists("CALM/data/race_datasets/sentiment_race_dataset.jsonl"))

# Mount Google Drive to save outputs (authorize access when prompted)
from google.colab import drive
drive.mount('/content/drive')

# Load the Gender and Race datasets into DataFrames
gender_data_path = "CALM/data/gender_datasets/sentiment_gender_dataset.jsonl"
race_data_path   = "CALM/data/race_datasets/sentiment_race_dataset.jsonl"

with open(gender_data_path, "r", encoding="utf-8") as f:
    gender_data = [json.loads(line) for line in f]
df_calm_gender = pd.DataFrame(gender_data)[["sentence", "gender"]].rename(columns={"sentence": "text"})

with open(race_data_path, "r", encoding="utf-8") as f:
    race_data = [json.loads(line) for line in f]
df_calm_race = pd.DataFrame(race_data)[["sentence", "race"]].rename(columns={"sentence": "text"})

print("\n CALM datasets loaded!")
print("Sample Gender Data:\n", df_calm_gender.head())
print("Sample Race Data:\n", df_calm_race.head())

# ============================================
# Section 2: Load RoBERTa & MentalBERT Models
# ============================================
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("\nðŸš€ Using device:", device)

# Set paths to your fine-tuned models on Google Drive
roberta_model_path = "/content/drive/MyDrive/trained_models/roberta_sst2"
mentalbert_model_path = "/content/drive/MyDrive/models/mentalbert_sst2"

print("\n Loading RoBERTa ...")
roberta_tokenizer = AutoTokenizer.from_pretrained(roberta_model_path)
roberta_model = AutoModelForSequenceClassification.from_pretrained(roberta_model_path).to(device)

print(" Loading MentalBERT ...")
mentalbert_tokenizer = AutoTokenizer.from_pretrained(mentalbert_model_path)
mentalbert_model = AutoModelForSequenceClassification.from_pretrained(mentalbert_model_path).to(device)

print("Models loaded successfully!")

# ============================================
# Section 3: Utility Functions for Predictions
# ============================================
def tokenize_sentences(df, tokenizer, max_length=128):
    return tokenizer(
        df["text"].tolist(),
        padding=True,
        truncation=True,
        max_length=max_length,
        return_tensors="pt"
    )

def predict_batch(model, inputs, batch_size=32):
    dataset = TensorDataset(inputs["input_ids"], inputs["attention_mask"])
    dataloader = DataLoader(dataset, batch_size=batch_size)
    all_labels = []
    all_probs  = []
    model.eval()
    with torch.no_grad():
        for batch in dataloader:
            input_ids, attention_mask = [b.to(device) for b in batch]
            outputs = model(input_ids=input_ids, attention_mask=attention_mask)
            logits = outputs.logits
            preds = torch.argmax(logits, dim=1).cpu().numpy()
            # For binary classification, probability of positive class (index 1)
            probs = torch.softmax(logits, dim=1)[:, 1].cpu().numpy()
            all_labels.extend(preds)
            all_probs.extend(probs)
    return np.array(all_labels), np.array(all_probs)

# ============================================
# Section 4: Compute Sentiment Predictions & Save Datasets (CALMdatasets)
# ============================================
# Define output folder for sentiment-annotated datasets
sentiment_folder = "/content/drive/MyDrive/CALMdatasets"
os.makedirs(sentiment_folder, exist_ok=True)

# --- Process Gender Dataset ---
gender_inputs_roberta = tokenize_sentences(df_calm_gender, roberta_tokenizer)
df_calm_gender["roberta_label"], df_calm_gender["roberta_score"] = predict_batch(roberta_model, gender_inputs_roberta)
gender_inputs_mentalbert = tokenize_sentences(df_calm_gender, mentalbert_tokenizer)
df_calm_gender["mentalbert_label"], df_calm_gender["mentalbert_score"] = predict_batch(mentalbert_model, gender_inputs_mentalbert)
df_calm_gender.to_csv(os.path.join(sentiment_folder, "gender_predictions.csv"), index=False)

# --- Process Race Dataset ---
race_inputs_roberta = tokenize_sentences(df_calm_race, roberta_tokenizer)
df_calm_race["roberta_label"], df_calm_race["roberta_score"] = predict_batch(roberta_model, race_inputs_roberta)
race_inputs_mentalbert = tokenize_sentences(df_calm_race, mentalbert_tokenizer)
df_calm_race["mentalbert_label"], df_calm_race["mentalbert_score"] = predict_batch(mentalbert_model, race_inputs_mentalbert)
df_calm_race.to_csv(os.path.join(sentiment_folder, "race_predictions.csv"), index=False)

print(" Sentiment predictions computed and datasets saved in", sentiment_folder)

# ============================================
# Section 5: Compute Bias Evaluation Metrics & Save Metrics (CALMresults)
# ============================================
# Define output folder for metrics and create subfolders for organization
metrics_folder = "/content/drive/MyDrive/CALMresults"
os.makedirs(metrics_folder, exist_ok=True)

bias_metrics_folder = os.path.join(metrics_folder, "BiasMetrics")
os.makedirs(bias_metrics_folder, exist_ok=True)

# Bias metric functions
def compute_spd_group_vs_rest(df, col, group_col):
    group_means = df.groupby(group_col)[col].mean()
    return group_means - df[col].mean()

def compute_pairwise_spd(df, col, group_col):
    unique_groups = df[group_col].unique()
    results = []
    for g1 in unique_groups:
        for g2 in unique_groups:
            if g1 != g2:
                spd = abs(df[df[group_col] == g1][col].mean() - df[df[group_col] == g2][col].mean())
                results.append((g1, g2, spd))
    return pd.DataFrame(results, columns=["Group1", "Group2", "Pairwise_SPD"])

def compute_max_min_spd(df, col, group_col):
    group_means = df.groupby(group_col)[col].mean()
    return group_means.max() - group_means.min()
df_calm_gender["mentalbert_score"] = torch.sigmoid(torch.tensor(df_calm_gender["mentalbert_score"])).numpy()
df_calm_race["mentalbert_score"] = torch.sigmoid(torch.tensor(df_calm_race["mentalbert_score"])).numpy()

# --- Compute SPD Metrics for Gender Dataset ---
# RoBERTa (binary predictions)
gender_roberta_binary_group_vs_rest = compute_spd_group_vs_rest(df_calm_gender, "roberta_label", "gender")
gender_roberta_binary_pairwise = compute_pairwise_spd(df_calm_gender, "roberta_label", "gender")
gender_roberta_binary_maxmin = compute_max_min_spd(df_calm_gender, "roberta_label", "gender")
# RoBERTa (continuous scores)
gender_roberta_cont_group_vs_rest = compute_spd_group_vs_rest(df_calm_gender, "roberta_score", "gender")
gender_roberta_cont_pairwise = compute_pairwise_spd(df_calm_gender, "roberta_score", "gender")
gender_roberta_cont_maxmin = compute_max_min_spd(df_calm_gender, "roberta_score", "gender")

# MentalBERT (binary predictions)
gender_mentalbert_binary_group_vs_rest = compute_spd_group_vs_rest(df_calm_gender, "mentalbert_label", "gender")
gender_mentalbert_binary_pairwise = compute_pairwise_spd(df_calm_gender, "mentalbert_label", "gender")
gender_mentalbert_binary_maxmin = compute_max_min_spd(df_calm_gender, "mentalbert_label", "gender")
# MentalBERT (continuous scores)
gender_mentalbert_cont_group_vs_rest = compute_spd_group_vs_rest(df_calm_gender, "mentalbert_score", "gender")
gender_mentalbert_cont_pairwise = compute_pairwise_spd(df_calm_gender, "mentalbert_score", "gender")
gender_mentalbert_cont_maxmin = compute_max_min_spd(df_calm_gender, "mentalbert_score", "gender")

# --- Compute SPD Metrics for Race Dataset ---
# RoBERTa (binary predictions)
race_roberta_binary_group_vs_rest = compute_spd_group_vs_rest(df_calm_race, "roberta_label", "race")
race_roberta_binary_pairwise = compute_pairwise_spd(df_calm_race, "roberta_label", "race")
race_roberta_binary_maxmin = compute_max_min_spd(df_calm_race, "roberta_label", "race")
# RoBERTa (continuous scores)
race_roberta_cont_group_vs_rest = compute_spd_group_vs_rest(df_calm_race, "roberta_score", "race")
race_roberta_cont_pairwise = compute_pairwise_spd(df_calm_race, "roberta_score", "race")
race_roberta_cont_maxmin = compute_max_min_spd(df_calm_race, "roberta_score", "race")

# MentalBERT (binary predictions)
race_mentalbert_binary_group_vs_rest = compute_spd_group_vs_rest(df_calm_race, "mentalbert_label", "race")
race_mentalbert_binary_pairwise = compute_pairwise_spd(df_calm_race, "mentalbert_label", "race")
race_mentalbert_binary_maxmin = compute_max_min_spd(df_calm_race, "mentalbert_label", "race")
# MentalBERT (continuous scores)
race_mentalbert_cont_group_vs_rest = compute_spd_group_vs_rest(df_calm_race, "mentalbert_score", "race")
race_mentalbert_cont_pairwise = compute_pairwise_spd(df_calm_race, "mentalbert_score", "race")
race_mentalbert_cont_maxmin = compute_max_min_spd(df_calm_race, "mentalbert_score", "race")

# Save all SPD metrics for Gender dataset
gender_roberta_binary_group_vs_rest.to_csv(os.path.join(bias_metrics_folder, "gender_roberta_binary_group_vs_rest.csv"))
gender_roberta_binary_pairwise.to_csv(os.path.join(bias_metrics_folder, "gender_roberta_binary_pairwise.csv"), index=False)
with open(os.path.join(bias_metrics_folder, "gender_roberta_binary_maxmin.txt"), "w") as f:
    f.write(str(gender_roberta_binary_maxmin))

gender_roberta_cont_group_vs_rest.to_csv(os.path.join(bias_metrics_folder, "gender_roberta_continuous_group_vs_rest.csv"))
gender_roberta_cont_pairwise.to_csv(os.path.join(bias_metrics_folder, "gender_roberta_continuous_pairwise.csv"), index=False)
with open(os.path.join(bias_metrics_folder, "gender_roberta_continuous_maxmin.txt"), "w") as f:
    f.write(str(gender_roberta_cont_maxmin))

gender_mentalbert_binary_group_vs_rest.to_csv(os.path.join(bias_metrics_folder, "gender_mentalbert_binary_group_vs_rest.csv"))
gender_mentalbert_binary_pairwise.to_csv(os.path.join(bias_metrics_folder, "gender_mentalbert_binary_pairwise.csv"), index=False)
with open(os.path.join(bias_metrics_folder, "gender_mentalbert_binary_maxmin.txt"), "w") as f:
    f.write(str(gender_mentalbert_binary_maxmin))

gender_mentalbert_cont_group_vs_rest.to_csv(os.path.join(bias_metrics_folder, "gender_mentalbert_continuous_group_vs_rest.csv"))
gender_mentalbert_cont_pairwise.to_csv(os.path.join(bias_metrics_folder, "gender_mentalbert_continuous_pairwise.csv"), index=False)
with open(os.path.join(bias_metrics_folder, "gender_mentalbert_continuous_maxmin.txt"), "w") as f:
    f.write(str(gender_mentalbert_cont_maxmin))

# Save all SPD metrics for Race dataset
race_roberta_binary_group_vs_rest.to_csv(os.path.join(bias_metrics_folder, "race_roberta_binary_group_vs_rest.csv"))
race_roberta_binary_pairwise.to_csv(os.path.join(bias_metrics_folder, "race_roberta_binary_pairwise.csv"), index=False)
with open(os.path.join(bias_metrics_folder, "race_roberta_binary_maxmin.txt"), "w") as f:
    f.write(str(race_roberta_binary_maxmin))

race_roberta_cont_group_vs_rest.to_csv(os.path.join(bias_metrics_folder, "race_roberta_continuous_group_vs_rest.csv"))
race_roberta_cont_pairwise.to_csv(os.path.join(bias_metrics_folder, "race_roberta_continuous_pairwise.csv"), index=False)
with open(os.path.join(bias_metrics_folder, "race_roberta_continuous_maxmin.txt"), "w") as f:
    f.write(str(race_roberta_cont_maxmin))

race_mentalbert_binary_group_vs_rest.to_csv(os.path.join(bias_metrics_folder, "race_mentalbert_binary_group_vs_rest.csv"))
race_mentalbert_binary_pairwise.to_csv(os.path.join(bias_metrics_folder, "race_mentalbert_binary_pairwise.csv"), index=False)
with open(os.path.join(bias_metrics_folder, "race_mentalbert_binary_maxmin.txt"), "w") as f:
    f.write(str(race_mentalbert_binary_maxmin))

race_mentalbert_cont_group_vs_rest.to_csv(os.path.join(bias_metrics_folder, "race_mentalbert_continuous_group_vs_rest.csv"))
race_mentalbert_cont_pairwise.to_csv(os.path.join(bias_metrics_folder, "race_mentalbert_continuous_pairwise.csv"), index=False)
with open(os.path.join(bias_metrics_folder, "race_mentalbert_continuous_maxmin.txt"), "w") as f:
    f.write(str(race_mentalbert_cont_maxmin))

print(" Bias metrics computed and saved in", bias_metrics_folder)

# ============================================
# Section 6: Permutation Testing for SPD
# ============================================
import json

permutation_folder = "/content/drive/MyDrive/CALMresults/permutation_test"
os.makedirs(permutation_folder, exist_ok=True)

# Bias metric functions

def compute_spd_group_vs_rest(df, col, group_col):
    group_means = df.groupby(group_col)[col].mean()
    return group_means - df[col].mean()

def permutation_test(df, col, group_col, num_permutations=1000):
    observed_spd = compute_spd_group_vs_rest(df, col, group_col)
    permuted_spd_values = []

    for _ in range(num_permutations):
        # Old (Incorrect) Shuffling
        # shuffled_groups = permuted_df[group_col].sample(frac=1, replace=False).values
        # permuted_df[group_col] = shuffled_groups

        # New (Fixed) Shuffling
        permuted_df = df.sample(frac=1, replace=False).reset_index(drop=True)
        permuted_spd = compute_spd_group_vs_rest(permuted_df, col, group_col)
        permuted_spd_values.append(permuted_spd)

    return observed_spd, permuted_spd_values

# Run permutation test for gender dataset
gender_observed_spd, gender_permuted_spd = permutation_test(df_calm_gender, "mentalbert_score", "gender")

# Run permutation test for race dataset
race_observed_spd, race_permuted_spd = permutation_test(df_calm_race, "mentalbert_score", "race")

# Convert SPD results to a dict for saving

gender_results = {
    "observed_spd": gender_observed_spd.to_dict() if hasattr(gender_observed_spd, 'to_dict') else float(gender_observed_spd),
    "permuted_spd_values": []
}
for p in gender_permuted_spd:
    if hasattr(p, 'to_dict'):
        gender_results["permuted_spd_values"].append(p.to_dict())
    else:
        gender_results["permuted_spd_values"].append(float(p))

race_results = {
    "observed_spd": race_observed_spd.to_dict() if hasattr(race_observed_spd, 'to_dict') else float(race_observed_spd),
    "permuted_spd_values": []
}
for p in race_permuted_spd:
    if hasattr(p, 'to_dict'):
        race_results["permuted_spd_values"].append(p.to_dict())
    else:
        race_results["permuted_spd_values"].append(float(p))

# Save results as JSON
with open(os.path.join(permutation_folder, "gender_permutation_spd.json"), "w") as f:
    json.dump(gender_results, f, indent=4)

with open(os.path.join(permutation_folder, "race_permutation_spd.json"), "w") as f:
    json.dump(race_results, f, indent=4)

print(" Permutation tests completed and saved in", permutation_folder)

# ============================================
# Section 7: Compute JSD and WD for Binary Distributions
# ============================================
# Create subfolder for JSD and WD results
jsd_wd_folder = os.path.join(metrics_folder, "JSD_WD")
os.makedirs(jsd_wd_folder, exist_ok=True)

def compute_group_distributions_binary(df, label_col, group_col):
    distributions = {}
    for group in df[group_col].unique():
        group_data = df[df[group_col] == group][label_col]
        p0 = np.mean(group_data == 0)
        p1 = np.mean(group_data == 1)
        distributions[group] = np.array([p0, p1])
    return distributions

def compute_jsd_wd(distributions):
    results = {}
    groups = list(distributions.keys())
    for i in range(len(groups)):
        for j in range(i+1, len(groups)):
            g1, g2 = groups[i], groups[j]
            d1, d2 = distributions[g1], distributions[g2]
            jsd = jensenshannon(d1, d2)
            wd = stats.wasserstein_distance([0, 1], [0, 1], u_weights=d1, v_weights=d2)
            key = f"{g1}_vs_{g2}"
            results[key] = {"JSD": jsd, "WD": wd}
    return results

# Compute and save JSD & WD for Gender dataset (RoBERTa binary predictions)
dist_gender_roberta = compute_group_distributions_binary(df_calm_gender, "roberta_label", "gender")
jsd_wd_gender_roberta = compute_jsd_wd(dist_gender_roberta)
with open(os.path.join(jsd_wd_folder, "gender_roberta_jsd_wd.json"), "w") as f:
    json.dump(jsd_wd_gender_roberta, f, indent=4)

# For Gender dataset (MentalBERT binary predictions)
dist_gender_mentalbert = compute_group_distributions_binary(df_calm_gender, "mentalbert_label", "gender")
jsd_wd_gender_mentalbert = compute_jsd_wd(dist_gender_mentalbert)
with open(os.path.join(jsd_wd_folder, "gender_mentalbert_jsd_wd.json"), "w") as f:
    json.dump(jsd_wd_gender_mentalbert, f, indent=4)

# Compute and save JSD & WD for Race dataset (RoBERTa binary predictions)
dist_race_roberta = compute_group_distributions_binary(df_calm_race, "roberta_label", "race")
jsd_wd_race_roberta = compute_jsd_wd(dist_race_roberta)
with open(os.path.join(jsd_wd_folder, "race_roberta_jsd_wd.json"), "w") as f:
    json.dump(jsd_wd_race_roberta, f, indent=4)

# For Race dataset (MentalBERT binary predictions)
dist_race_mentalbert = compute_group_distributions_binary(df_calm_race, "mentalbert_label", "race")
jsd_wd_race_mentalbert = compute_jsd_wd(dist_race_mentalbert)
with open(os.path.join(jsd_wd_folder, "race_mentalbert_jsd_wd.json"), "w") as f:
    json.dump(jsd_wd_race_mentalbert, f, indent=4)

print(" JSD and WD computed and saved in", jsd_wd_folder)

# ============================================
# Section 8: Visualizations
# ============================================
visualization_folder = os.path.join(metrics_folder, "Visualizations")
os.makedirs(visualization_folder, exist_ok=True)

# Example: Visualize Gender RoBERTa Binary SPD (Group vs. Rest)
plt.figure(figsize=(8, 5))
sns.barplot(x=gender_roberta_binary_group_vs_rest.index, y=gender_roberta_binary_group_vs_rest.values, palette="Blues")
plt.title("Gender RoBERTa Binary: Group vs Rest SPD")
plt.xlabel("Gender Group")
plt.ylabel("SPD Value")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(os.path.join(visualization_folder, "gender_roberta_binary_group_vs_rest.png"))
plt.show()

# Example: Visualize Gender MentalBERT Continuous SPD (Group vs. Rest)
plt.figure(figsize=(8, 5))
sns.barplot(x=gender_mentalbert_cont_group_vs_rest.index, y=gender_mentalbert_cont_group_vs_rest.values, palette="Purples")
plt.title("Gender MentalBERT Continuous: Group vs Rest SPD")
plt.xlabel("Gender Group")
plt.ylabel("SPD Value")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(os.path.join(visualization_folder, "gender_mentalbert_cont_group_vs_rest.png"))
plt.show()

# Example: Visualize Race RoBERTa Binary SPD (Group vs. Rest)
plt.figure(figsize=(8, 5))
sns.barplot(x=race_roberta_binary_group_vs_rest.index, y=race_roberta_binary_group_vs_rest.values, palette="Greens")
plt.title("Race RoBERTa Binary: Group vs Rest SPD")
plt.xlabel("Race Group")
plt.ylabel("SPD Value")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(os.path.join(visualization_folder, "race_roberta_binary_group_vs_rest.png"))
plt.show()

# Example: Visualize Race MentalBERT Continuous SPD (Group vs. Rest)
plt.figure(figsize=(8, 5))
sns.barplot(x=race_mentalbert_cont_group_vs_rest.index, y=race_mentalbert_cont_group_vs_rest.values, palette="Oranges")
plt.title("Race MentalBERT Continuous: Group vs Rest SPD")
plt.xlabel("Race Group")
plt.ylabel("SPD Value")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(os.path.join(visualization_folder, "race_mentalbert_cont_group_vs_rest.png"))
plt.show()

print(" Visualizations computed and saved in", visualization_folder)